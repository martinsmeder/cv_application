Live server: npm run dev

Get prettier to work for JSX; 
https://stackoverflow.com/questions/45285339/prettier-is-not-working-at-react-project

Stick to camelCase in both html, css and js  (if possible)

Props = Arguments passed into components (think prop = object property)

Use keys when working with data (lists, arrays, objects, etc) to keep track
of things even when items are moved around, deleted, etc. Don't use index
as keys since they can change, and don't generate on the fly (like with 
Math.random()). Keys should remain.

State variables are only necessary to keep info between re-renders of a 
component. Don't introduce state variables when a regular variable works fine.

Todo:
TOD --> More On State 
1. Understand choosing the state structure by drilling exercises 
2. Sharing State Between Components

Structuring state: 
1. Group related state. If you always update two or more state variables at 
   the same time, consider merging them into a single state variable.
2. Avoid contradictions in state. When the state is structured in a way that 
   several pieces of state may contradict and “disagree” with each other, 
   you leave room for mistakes. Try to avoid this.
3. Avoid redundant state. If you can calculate some information from the 
   component’s props or its existing state variables during rendering, you 
   should not put that information into that component’s state.
4. Avoid duplication in state. When the same data is duplicated between 
   multiple state variables, or within nested objects, it is difficult to 
   keep them in sync. Reduce duplication when you can.
5. Avoid deeply nested state. Deeply hierarchical state is not very convenient 
   to update. When possible, prefer to structure state in a flat way.